<!DOCTYPE html>
<html>
    <head>
        <title>TD4 exo5</title>
        <!-- voir https://d3js.org/getting-started -->
        <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
    </head>
    <body>
        <svg id="dessin"></svg>
        <script>
            
            // méthode appendIfAbsent pour D3
                d3.selection.prototype.appendIfAbsent = function(selector, type) {
                    const element = this.select(selector)
                    return element.empty() ? this.append(type).attr("id", selector.replace("#","")) : element
                }

            function ScatterPlot({
                titleX="X", getX=d => d.x, titleY="Y", getY=d => d.y, getColor=d => "steelblue",
                width=400, height=200,
                margin={top: 20, right: 10, bottom: 30, left: 40}
            }={}) {

                // méthode appendIfAbsent pour D3
                d3.selection.prototype.appendIfAbsent = function(selector, type) {
                    const element = this.select(selector)
                    return element.empty() ? this.append(type).attr("id", selector.replace("#","")) : element
                }

                function _dessiner(svg, points) {
                    svg.attr("viewBox", `0 0 ${width} ${height}`);

                    const fX = d3.scaleLinear()
                        .domain(d3.extent(points, getX))
                        .range([margin.left, width - margin.right]);

                    const fY = d3.scaleLinear()
                        .domain(d3.extent(points, getY))
                        .range([height - margin.bottom, margin.top]);

                    svg.selectAll("circle").remove(); // on supprime juste les cercles pour redessiner

                    // Axes
                    svg.appendIfAbsent("#x-axis", "g")
                        .attr("transform", `translate(0,${height - margin.bottom})`)
                        .call(d3.axisBottom(fX));

                    svg.appendIfAbsent("#y-axis", "g")
                        .attr("transform", `translate(${margin.left},0)`)
                        .call(d3.axisLeft(fY));

                    // Titres axes
                    const gAxes = svg.appendIfAbsent("#axes-labels", "g")
                        .attr("font-family", "sans-serif")
                        .attr("font-size", height / 20)
                        .style("text-anchor", "end")
                        .style("fill", "black");

                    gAxes.appendIfAbsent("#label-x", "text")
                        .attr("x", width - margin.right)
                        .attr("y", height)
                        .attr("dominant-baseline", "ideographic")
                        .text(titleX);

                    gAxes.appendIfAbsent("#label-y", "text")
                        .attr("transform", "rotate(-90)")
                        .attr("x", -margin.top)
                        .attr("y", 0)
                        .attr("dominant-baseline", "hanging")
                        .text(titleY);

                    // Points
                    svg.selectAll("circle")
                        .data(points)
                        .join("circle")
                        .attr("cx", d => fX(getX(d)))
                        .attr("cy", d => fY(getY(d)))
                        .attr("r", width / 100)
                        .attr("fill", getColor);
                }

                function dessiner(selection) {
                    selection.each(function(datum) {
                        _dessiner(d3.select(this), datum)
                    })
                }

                return dessiner;
            }

            const colors = {
                "setosa": "#69b3a2",
                "versicolor": "#a269b3",
                "virginica": "#b3a269",
            };

            // Création de la fonction de dessin
            const SC = ScatterPlot({
                titleX: "Sepal Length",
                getX: d => d.sepalLength,
                titleY: "Petal Length",
                getY: d => d.petalLength,
                getColor: d => colors[d.species]
            });

            // Appel avec les données
            d3.json("iris.json").then(iris => {
                d3.select("#dessin")
                .datum(iris)
                .call(SC);

                // redessiner une petite partie des données
                d3.select("#dessin")
                .datum(iris.slice(0, 30))
                .call(SC);
            });
        </script>

    </body>
</html>